{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FF4j Home Documentation","text":"<p>Welcome to FF4j documentation</p>"},{"location":"cheat/","title":"Cheat","text":""},{"location":"cheat/#executable-code-replit","title":"Executable Code (REPLIT)","text":"<p>Change values <code>ASTRA_DB_TOKEN</code>, <code>ASTRA_DB_ID</code>, <code>ASTRA_DB_REGION</code>, <code>ASTRA_DB_KEYSPACE</code> in the code below and execute with</p> <p></p>"},{"location":"cheat/#mermaids","title":"Mermaids","text":""},{"location":"cheat/#1-flow","title":"1\ufe0f\u20e3 Flow","text":"<p>Cassandra</p> GraphCode <pre><code>graph LR\n    user&gt;fa:fa-user Developer]-- Create Database --&gt; cassandra[(fa:fa-database Cassandra)]\n\n    user-- Design --&gt;usecase{{fa:fa-cube Use Case}}\n    usecase-- Workflow --&gt;queries[fa:fa-bezier-curve queries]\n    usecase-- MCD --&gt;entities[fa:fa-grip-vertical entities]\n    queries-- Chebotko modelization --&gt;schema[fa:fa-list schema]\n    entities-- Chebotko modelization --&gt;schema[fa:fa-list schema]\n    schema[fa:fa-list  schema]-- Inject --&gt;cassandra[(fa:fa-database Cassandra)]\n\n    user-- prepare --&gt;dataset{{fa:fa-coings DataSet}}\n    dataset-- input --&gt;dsbulk-- load data --&gt;cassandra\n\n    user-- Create Token --&gt;token{{fa:fa-key Token}}\n    usecase--&gt;API\n\n    API--&gt;Request\n    token--&gt;Request\n    schema--&gt;Request\n    Request-- invoke --&gt;cassandra</code></pre> <pre><code>graph LR\n    user&gt;fa:fa-user Developer]-- Create Database --&gt; cassandra[(fa:fa-database Cassandra)]\nuser-- Design --&gt;usecase{{fa:fa-cube Use Case}}\nusecase-- Workflow --&gt;queries[fa:fa-bezier-curve queries]\nusecase-- MCD --&gt;entities[fa:fa-grip-vertical entities]\nqueries-- Chebotko modelization --&gt;schema[fa:fa-list schema]\nentities-- Chebotko modelization --&gt;schema[fa:fa-list schema]\nschema[fa:fa-list  schema]-- Inject --&gt;cassandra[(fa:fa-database Cassandra)]\nuser-- prepare --&gt;dataset{{fa:fa-coings DataSet}}\ndataset-- input --&gt;dsbulk-- load data --&gt;cassandra\n\nuser-- Create Token --&gt;token{{fa:fa-key Token}}\nusecase--&gt;API\n\nAPI--&gt;Request\n    token--&gt;Request\n    schema--&gt;Request\n    Request-- invoke --&gt;cassandra\n</code></pre> <p>Example #1</p> OutputMarkdown <pre><code>graph TD;\n  A--&gt;B;\n  A--&gt;C;\n  B--&gt;D;\n  C--&gt;D;</code></pre> <pre><code>   ```mermaid\n   graph TD;\n     A--&gt;B;\n     A--&gt;C;\n     B--&gt;D;\n     C--&gt;D;\n   ```\n</code></pre> <p>Example3</p> OutputMarkdown <pre><code>graph TD\n  A[Hard] --&gt;|Text| B(Round)\n  B --&gt; C{Decision}\n  C --&gt;|One| D[Result 1]\n  C --&gt;|Two| E[Result 2]</code></pre> <pre><code>   ```mermaid\n   graph TD\n     A[Hard] --&gt;|Text| B(Round)\n     B --&gt; C{Decision}\n     C --&gt;|One| D[Result 1]\n     C --&gt;|Two| E[Result 2]\n   ```\n</code></pre>"},{"location":"cheat/#2-sequence","title":"2\ufe0f\u20e3 Sequence","text":"OutputMarkdown <pre><code>sequenceDiagram\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>   ```mermaid\n   sequenceDiagram\n   Alice-&gt;&gt;John: Hello John, how are you?\n   loop Healthcheck\n       John-&gt;&gt;John: Fight against hypochondria\n   end\n   Note right of John: Rational thoughts!\n   John--&gt;&gt;Alice: Great!\n   John-&gt;&gt;Bob: How about you?\n   Bob--&gt;&gt;John: Jolly good!\n\n   ```\n</code></pre>"},{"location":"cheat/#3-gantt","title":"3\ufe0f\u20e3 Gantt","text":"OutputMarkdown <pre><code>gantt\nsection Section\nCompleted :done,    des1, 2014-01-06,2014-01-08\nActive        :active,  des2, 2014-01-07, 3d\nParallel 1   :         des3, after des1, 1d\nParallel 2   :         des4, after des1, 1d\nParallel 3   :         des5, after des3, 1d\nParallel 4   :         des6, after des4, 1d</code></pre> <pre><code>   ```mermaid\n   gantt\n   section Section\n   Completed :done,    des1, 2014-01-06,2014-01-08\n   Active        :active,  des2, 2014-01-07, 3d\n   Parallel 1   :         des3, after des1, 1d\n   Parallel 2   :         des4, after des1, 1d\n   Parallel 3   :         des5, after des3, 1d\n   Parallel 4   :         des6, after des4, 1d\n\n   ```\n</code></pre>"},{"location":"cheat/#4-class","title":"4\ufe0f\u20e3 Class","text":"OutputMarkdown <pre><code>classDiagram\nClass01 &lt;|-- AveryLongClass : Cool\n&lt;&lt;interface&gt;&gt; Class01\nClass09 --&gt; C2 : Where am i?\nClass09 --* C3\nClass09 --|&gt; Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n &lt;&lt;service&gt;&gt;\n int id\n size()\n}</code></pre> <pre><code>   ```mermaid\n   classDiagram\n   Class01 &lt;|-- AveryLongClass : Cool\n   &lt;&lt;interface&gt;&gt; Class01\n   Class09 --&gt; C2 : Where am i?\n   Class09 --* C3\n   Class09 --|&gt; Class07\n   Class07 : equals()\n   Class07 : Object[] elementData\n   Class01 : size()\n   Class01 : int chimp\n   Class01 : int gorilla\n   class Class10 {\n    &lt;&lt;service&gt;&gt;\n    int id\n    size()\n   }\n\n   ```\n</code></pre>"},{"location":"cheat/#5-state","title":"5\ufe0f\u20e3 State","text":"OutputMarkdown <pre><code>stateDiagram-v2\n[*] --&gt; Still\nStill --&gt; [*]\nStill --&gt; Moving\nMoving --&gt; Still\nMoving --&gt; Crash\nCrash --&gt; [*]</code></pre> <pre><code>   ```mermaid\n   stateDiagram-v2\n   [*] --&gt; Still\n   Still --&gt; [*]\n   Still --&gt; Moving\n   Moving --&gt; Still\n   Moving --&gt; Crash\n   Crash --&gt; [*]\n\n   ```\n</code></pre>"},{"location":"cheat/#6-pie","title":"6\ufe0f\u20e3 Pie","text":"OutputMarkdown <pre><code>pie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15</code></pre> <pre><code>   ```mermaid\n   pie\n   \"Dogs\" : 386\n   \"Cats\" : 85\n   \"Rats\" : 15\n\n   ```\n</code></pre>"},{"location":"cheat/#7-journey","title":"7\ufe0f\u20e3 Journey","text":"OutputMarkdown <pre><code>journey\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 3: Me</code></pre> <pre><code>   ```mermaid\n   journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 3: Me\n\n   ```\n</code></pre>"},{"location":"cheat/#8-er","title":"8\ufe0f\u20e3 ER","text":"OutputMarkdown <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre> <pre><code>   ```mermaid\n   erDiagram\n     CUSTOMER ||--o{ ORDER : places\n     ORDER ||--|{ LINE-ITEM : contains\n     CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n   ```\n</code></pre>"},{"location":"cheat/#sample-blocs","title":"Sample Blocs","text":"<p>THis is a note</p> <p>my note</p> <p>abstract</p> <p>my note</p> <p>info</p> <p>info</p> Sample tip  <p>tip</p> How to add plugins to the Docker image? <p>Import Stuff</p> <p>Success</p> <p>my note</p> <p>Sample warning</p> <p>This is so cool.</p> <p>failure</p> <p>my note</p> <p>danger</p> <p>danger</p> <p>bug</p> <p>bug</p> Sample example <p>example</p> <p>Sample warning</p> <p>warning</p> Sample wuote <p>quote</p>"},{"location":"cheat/#tooltip","title":"Tooltip","text":"<pre><code>wanna a tooltip ? # (1)!\n</code></pre> <ol> <li> <p>Cedrick rock</p> <pre><code>mkdocs serve\n</code></pre> </li> </ol>"},{"location":"cheat/#icons","title":"Icons","text":""},{"location":"cheat/#material","title":"Material","text":"<p>HERE is the full list</p>"},{"location":"cheat/#font-awesome","title":"Font Awesome","text":"<p>HTML</p> <li> = fa-camera-retro</li> <p>MARKDOWN </p> <p>HERE is the full list</p>"},{"location":"cheat/#opticons","title":"Opticons","text":"<p> Sample</p>"},{"location":"cheat/#adding-buttons","title":"Adding buttons","text":"<p>In order to render a link as a button, suffix it with curly braces and add the <code>.md-button</code> class selector to it. The button will receive the selected [primary color] and [accent color] if active.</p> Button<pre><code>[Subscribe to our newsletter](#){ .md-button }\n</code></pre> <p>[Subscribe to our newsletter][demo]{ .md-button }</p> <p>[Subscribe to our newsletter][demo]{ .md-button .md-button--primary }</p>"},{"location":"pages/configuration/","title":"Architecture","text":"<p>Configuration Home</p>"},{"location":"pages/advanced/aop/","title":"\u2023 Aspect Oriented Programming","text":"<p>This is aop.md</p>"},{"location":"pages/advanced/caching/","title":"\u2023 Caching","text":"<p>This is caching.md</p>"},{"location":"pages/advanced/cli/","title":"\u2023 Command line interface","text":"<p>This is cli.md</p>"},{"location":"pages/advanced/feature-groups/","title":"\u2023 Features Groups","text":"<p>This is feature groups</p>"},{"location":"pages/advanced/jmx/","title":"\u2023 JMX Support","text":"<p>This is jmx.md</p>"},{"location":"pages/advanced/spring-boot/","title":"\u2023 Spring Boot","text":"<p>This is spring-boot.md</p>"},{"location":"pages/basics/","title":"Getting Started","text":""},{"location":"pages/basics/#introductory-video","title":"Introductory Video","text":"<p>A 15-min video going over the main use cases and a demo with microservices. The associated source code can be found here</p> <p></p>"},{"location":"pages/basics/#test-with-docker","title":"Test with Docker","text":"<p>Prerequisites</p> <ul> <li>Having docker installed</li> </ul> <p>\u2705 Step A. - Having a <code>docker</code> engine on your machine, start a container with the following </p> <pre><code>docker run -p 8080:8080 ff4j/ff4j-sample-springboot2x:1.8.5\n</code></pre> <p><code>\ud83d\udc41\ufe0f Expected Console</code></p> <pre><code>   _____  _____  _____     __ _/ ____\\/ ____\\/  |  |   |__|\n\\   __\\\\   __\\/   |  |_  |  |\n|  |   |  | /    ^   /  |  |\n|__|   |__| \\____   /\\__|  |\n|__\\______|\nBrought to you by FF4j Developments team\nIf you like us, consider to give a \u2b50 on github, that helps s! https://github.com/ff4j/ff4j/stargazers\nThe application should be available on http://localhost:8080\n15:30:17.803 INFO  org.ff4j.sample.Application                        : Starting Application v1.8.5 on 9a94abfcef56 with PID 1 (/app.jar started by root in /)\n15:30:17.810 INFO  org.ff4j.sample.Application                        : No active profile set, falling back to default profiles: default\n15:30:21.827 INFO  org.ff4j.sample.HomeController                     :  + Features and properties have been created for the sample.\n15:30:24.181 INFO  org.ff4j.sample.Application                        : Started Application in 7.275 seconds (JVM running for 8.759)\n</code></pre> <p>\u2705 Step B. - Access: http://localhost:8080. In the basic web page you can see 3 bullets.  Each is also a feature of the application that we will enable / disable. </p> <p>\u2705 Step C. - Click web console link</p> <p></p> <p>\u2705 Step D. - Click <code>Features</code> in the menu or <code>FeatureStore</code> in the General Tab to list features</p> <p></p> <p>\u2705 Step E. - Disable feature <code>showRestApiUrl</code> by clicking the toggle icon</p> <p></p> <p>\u2705 Step F. - Back, now select the <code>Properties</code> item in the menu.</p> <p></p> <p>\u2705 Step G. - Edit value of property <code>username</code> by click the pencil icon</p> <p></p> <p>\u2705 Step H. - Edit value of property <code>username</code> by click the pencil icon</p> <p></p> <p>\u2705 Step I. - Going back to the home page you see that only 2 lines are shown (one is disabled) and the property got a new value</p> <p></p> <p>Your are done !</p>"},{"location":"pages/basics/#spring-boot-application","title":"Spring-Boot Application","text":"<p>Prerequisites</p> <ul> <li>Java 8+ installed</li> <li>Maven Installed</li> <li>Git installed (optional)</li> </ul> <p>\u2705 Step A. - Download the code of the demo</p> <ul> <li>Execute the following <code>git</code> or download as a zip</li> </ul> <pre><code>git clone https://github.com/ff4j/ff4j-demo.git\n</code></pre> <p>\u2705 Step B. - Start the demo</p> <pre><code>cd ff4j-demo\nmvn spring-boot:run\n</code></pre> <p>\u2705 Step C. - Access the demo</p> <ul> <li>Test the running application on localhost:8080.  </li> </ul> <p></p> <ul> <li>You should import the code in your IDE as a starting project. It is a spring boot application, it leverages the <code>spring-boot-starter</code>. The following dependency has been added to the <code>pom.xml</code></li> </ul> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ff4j&lt;/groupId&gt;\n&lt;artifactId&gt;ff4j-spring-boot-starter&lt;/artifactId&gt;\n&lt;version&gt;${ff4j.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"pages/basics/architecture/","title":"\u2023 Architecture","text":"<p>This is architecture.</p>"},{"location":"pages/basics/feature-store/","title":"\u2023 Feature Store","text":"<p>This is feature Store</p>"},{"location":"pages/basics/feature/","title":"\u2023 Feature Flag","text":""},{"location":"pages/basics/feature/#overview","title":"Overview","text":"<p>The <code>Feature</code> term is used to represent functionality or treatment in an application.  It is identified by an unique identifier (uid). </p> <p>A Feature represents a business logic that can potentially crosses every layer  of applications from user interfaces to data access. Therefore, to implement  a feature toggle mechanism, we must help you in each layer as shown with the  picture on the right.</p> <p></p> <p>Feature toggle,or feature flag, purpose is to evaluate the state of features at runtime to drive the execution of your code. You can change the state of features at runtime (enable and disable, toggle <code>ON/OFF</code>). </p> <p>Each feature is associated as a flag.  Given a feature with identifier <code>f1</code> we want to write in the code:</p> <pre><code>if (ff4j.check(\"f1\")) {\nSystem.out.println(\"The feature 'f1' is 'ON'\");\n} else {\nSystem.out.println(\"The feature 'f1' is 'OFF'\");    }\n</code></pre>"},{"location":"pages/basics/feature/#feature-object","title":"<code>Feature</code> object","text":"<p>With the library <code>FF4J</code>, a feature is an object with multiple attributes (not only identifier and state): </p> <ul> <li>A text description to explain the purpose</li> <li>An optional groupName to toggle multiple features at once (see <code>FeatureGroup</code>)</li> <li>An optional set of permissions to implement RBAC access. (see <code>Permissions</code>)</li> <li>An optional flipping strategy to implement your predicates (see <code>FlippingStrategy</code>)</li> <li> <p>A key/value map named <code>customProperties</code> to create some context</p> <pre><code>classDiagram\nFeature --* FlippingStrategy\nFeature --* Property\n\nFeature : enable()\nFeature : disable()\nFeature : toJson()\nFeature : fromJson(...)  \nFeature : getters()\nFeature : setters()\nFeature : String uid\nFeature : boolean enable\nFeature : String description\nFeature : String group\nFeature : Set&lt;String&gt; permissions\nFeature : Map&lt;String,Property&gt; customProperties\nFlippingStrategy : getInitParams()\nFlippingStrategy : evaluate()\nProperty : name\nProperty : value</code></pre> </li> </ul>"},{"location":"pages/basics/feature/#sample-codes","title":"Sample codes","text":"<p>You can interact with the <code>Feature</code> object programmatically :</p> <pre><code>Feature f1 = new Feature(\"f1\");\nFeature f2 = new Feature(\"f2\", false, \"sample description\");\n</code></pre> <ul> <li>Feature with Permissions:</li> </ul> <pre><code>Set &lt; String &gt; permission = new HashSet&lt;String&gt;();\npermission.add(\"BETA-TESTER\");\npermission.add(\"VIP\");\nFeature f3 = new Feature(\"f3\", false, \"desc\", \"GROUP_1\", permission);\n</code></pre> <ul> <li>Feature with Custom Properties:</li> </ul> <pre><code>Feature f4 = new Feature(\"f4\");\nf4.addProperty(new PropertyString(\"p1\", \"v1\"));\nf4.addProperty(new PropertyDouble(\"pie\", Math.PI));\nf4.addProperty(new PropertyInt(\"myAge\", 12));\n</code></pre> <ul> <li>Feature with <code>FlippingStrategy</code></li> </ul> <pre><code>Feature f5 = new Feature(\"f5\");\nCalendar nextReleaseDate = Calendar.getInstance();\nnextReleaseDate.set(Calendar.MONTH, Calendar.SEPTEMBER);\nnextReleaseDate.set(Calendar.DAY_OF_MONTH, 1);\nf5.setFlippingStrategy(new ReleaseDateFlipStrategy(nextReleaseDate.getTime()));\n// Working with DarkLaunch Flipping Strategy\nFeature f6 = new Feature(\"f6\");\nf6.setFlippingStrategy(new DarkLaunchStrategy(0.2d));        // Working with White List Flipping Strategy\nFeature f7 = new Feature(\"f7\");\nf7.setFlippingStrategy(new WhiteListStrategy(\"localhost\"));\n</code></pre> <p>It is not likely that you do have to create the <code>Features</code> objects on your own (except for tests). They will be stored in the FeatureStore and purpose is really to <code>check</code> the status at runtime. You may want to create them through the webUI or configuration files. Attributes mentionned before are available in the <code>edit</code> modal:</p> <p></p>"},{"location":"pages/basics/flipping-strategy/","title":"\u2023 Flipping Strategy","text":"<p>this is flipping strategy</p>"},{"location":"pages/basics/property-store/","title":"\u2023 Property Store","text":"<p>This is property Store</p>"},{"location":"pages/basics/security/","title":"\u2023 Security","text":"<p>This is security</p>"},{"location":"pages/samples/","title":"Home","text":"<p>Sample Codes</p>"},{"location":"pages/spring/","title":"Home","text":"<p>Spring</p>"},{"location":"pages/stores/","title":"Stores","text":"<p>INDEX stores</p>"},{"location":"pages/strategy/","title":"Flipping Strategies","text":"<p>INDEX strategy</p>"},{"location":"pages/v2/","title":"v2","text":"<p>After 10 years of existence it is now time to think about a new major version for ff4j. The idea is to fix the misconceptions of v1 and to extends the capabilities.</p>"},{"location":"pages/v2/#v1-limitations-and-issues","title":"V1 Limitations and issues","text":""},{"location":"pages/v2/#v1-inaccuracy","title":"V1 Inaccuracy","text":"<ul> <li> <p>Monolithic: There is no clear definition of what should be embedded in your application and what would be a shared backend. The code needs to reflect that distinction,</p> </li> <li> <p>Flipping Strategy: The term <code>FlipStrategy</code> is not really accurate and should be renamed <code>ToggleStrategy</code></p> </li> <li> <p>FF4j should embrace the java languages improvements with <code>Predicate</code>, <code>Optional</code>, <code>Lambda</code>...</p> </li> <li> <p>We should enforce authentication for any operations, to track and secure</p> </li> </ul>"},{"location":"pages/v2/#v1-limitations","title":"V1 Limitations","text":"<ul> <li> <p>A feature should have a list of <code>ToggleStrategies</code></p> </li> <li> <p>The backend REST API was a single point of failure, you needed a load balancer, you want to do client-side load balancing</p> </li> <li> <p>The persistence should allow multi-tenancy and or at least multiple applications.</p> </li> <li> <p>The authentication manager does not need to be at FF4j level</p> </li> <li> <p>Each entity should come with an access control list to define who's doing what.</p> </li> </ul>"},{"location":"pages/v2/#v2-design","title":"V2 Design","text":"<ul> <li>FF4j is the <code>client</code> part handling connectivity</li> </ul> <pre><code>FF4j ff4j = FF4j.Builder().\n// Connectivity\n.withCredentials(\"admin\", \"admin\")\n.withBackends(new BackendRest(\"http://localhost:8080:\"))\n.withSSLPolicy()\n.withRetryPolicy()\n.withLoadBalancingPolicy()\n.withFailoverPolicy()\n// Applications\n.withNamespace(\"applicationX\")\n.withCaching(ttl, activePolling polling interface)\n// Request settings\n.withPageSize()\n.withTimeout()\n.withRequestTracking()\n.build();\nff4j.feature(\"f1\").find();\nff4j.feature(\"f1\").isToggled();\n</code></pre> <ul> <li>FF4j Backend </li> </ul>"},{"location":"pages/web/","title":"web","text":"<p>INDEX web</p>"},{"location":"pages/web/apis/","title":"\u2023 REST Api","text":"<p>This is apis</p>"},{"location":"pages/web/console/","title":"\u2023 Web Console","text":"<p>This is console</p>"},{"location":"pages/web/taglib/","title":"\u2023 Taglib","text":"<p>This is taglib</p>"},{"location":"pages/web/thymeleaf/","title":"\u2023 Thymeleaf tags","text":"<p>This is thymeleaf</p>"}]}